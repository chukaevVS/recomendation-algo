"""
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""

import pandas as pd
import numpy as np
from typing import List, Dict, Tuple, Optional, Union
import pickle
import os
from datetime import datetime

try:
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –ø–∞–∫–µ—Ç–∞
    from .models.data_models import DataManager, User, Product, Rating
    from .algorithms.knn_recommender import KNNRecommender
    from .database.db_loader import DatabaseLoader, HybridDataManager
except ImportError:
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    from models.data_models import DataManager, User, Product, Rating
    from algorithms.knn_recommender import KNNRecommender
    from database.db_loader import DatabaseLoader, HybridDataManager


class RecommendationSystemDB:
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏, –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, 
                 database_url: Optional[str] = None,
                 approach: str = 'user_based',
                 n_neighbors: int = 10,
                 metric: str = 'cosine',
                 min_ratings: int = 5,
                 auto_load: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ë–î.
        
        Args:
            database_url: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite)
            approach: –ü–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º ('user_based' –∏–ª–∏ 'item_based')
            n_neighbors: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è k-NN
            metric: –ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ('cosine', 'euclidean', 'manhattan')
            min_ratings: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —É—á–µ—Ç–∞
            auto_load: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        self.approach = approach
        self.n_neighbors = n_neighbors
        self.metric = metric
        self.min_ratings = min_ratings
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.data_manager = HybridDataManager(database_url)
        self.recommender = KNNRecommender(
            n_neighbors=n_neighbors,
            metric=metric,
            approach=approach,
            min_ratings=min_ratings
        )
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_data_loaded = False
        self.is_model_trained = False
        
        # –ö—ç—à –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self._popular_items_cache = None
        self._cache_timestamp = None
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if auto_load:
            self.load_data_from_db()
            self.train_model()
        
    def load_data_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        print("üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ –ø–∞–º—è—Ç—å
        users, products, ratings = self.data_manager.load_initial_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π DataManager –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.data_manager_legacy = DataManager()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è DataManager
        users_data = [user.to_dict() for user in users]
        products_data = [product.to_dict() for product in products]
        ratings_data = [rating.to_dict() for rating in ratings]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ DataManager
        self.data_manager_legacy.load_users(users)
        self.data_manager_legacy.load_products(products)
        self.data_manager_legacy.load_ratings(ratings)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        validation_results = self.data_manager_legacy.validate_data()
        if not all(validation_results.values()):
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:")
            for check, result in validation_results.items():
                if not result:
                    print(f"  - {check}: FAILED")
        
        self.is_data_loaded = True
        self.is_model_trained = False
        self._invalidate_cache()
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"  - –†–µ–π—Ç–∏–Ω–≥–æ–≤: {len(ratings)}")
    
    def train_model(self):
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load_data_from_db() —Å–Ω–∞—á–∞–ª–∞.")
        
        print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º DataFrame —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        ratings_df = self.data_manager_legacy.ratings_df.copy()
        
        # –û–±—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        self.recommender.fit(ratings_df)
        
        self.is_model_trained = True
        self._invalidate_cache()
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = self.recommender.get_model_info()
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        for key, value in model_info.items():
            print(f"  - {key}: {value}")
    
    def get_recommendations(self, user_id: int, n_recommendations: int = 10, 
                          include_metadata: bool = True) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            n_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            include_metadata: –í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        if not self.is_model_trained:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ train_model() —Å–Ω–∞—á–∞–ª–∞.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        recommendations = self.recommender.recommend_items(user_id, n_recommendations)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = []
        for product_id, predicted_rating in recommendations:
            rec_dict = {
                'product_id': product_id,
                'predicted_rating': round(predicted_rating, 2)
            }
            
            if include_metadata:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
                    product_info = self.data_manager.get_product_from_cache(product_id)
                    if product_info:
                        rec_dict.update({
                            'name': product_info.name,
                            'category': product_info.category,
                            'price': product_info.price,
                            'brand': product_info.brand
                        })
                    else:
                        # Fallback –Ω–∞ legacy DataManager
                        product_info = self.data_manager_legacy.get_product_info(product_id)
                        rec_dict.update({
                            'name': product_info['name'],
                            'category': product_info['category'],
                            'price': product_info['price'],
                            'brand': product_info.get('brand', 'Unknown')
                        })
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                    rec_dict.update({
                        'name': f'Product {product_id}',
                        'category': 'Unknown',
                        'price': 0.0,
                        'brand': 'Unknown'
                    })
            
            result.append(rec_dict)
        
        return result
    
    def predict_rating(self, user_id: int, product_id: int) -> float:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        """
        if not self.is_model_trained:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ train_model() —Å–Ω–∞—á–∞–ª–∞.")
        
        return self.recommender.predict_rating(user_id, product_id)
    
    def get_similar_users(self, user_id: int, n_similar: int = 10) -> List[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            n_similar: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        """
        if not self.is_model_trained or self.approach != 'user_based':
            raise ValueError("–ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—É—á–µ–Ω–∞ —Å approach='user_based'")
        
        similar_users = self.recommender.find_similar_users(user_id, n_similar)
        
        result = []
        for similar_user_id, similarity in similar_users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
                user_info = self.data_manager.get_user_from_cache(similar_user_id)
                if user_info:
                    result.append({
                        'user_id': similar_user_id,
                        'similarity': round(similarity, 3),
                        'name': user_info.name,
                        'age': user_info.age,
                        'ratings_count': len(self.data_manager.get_user_ratings(similar_user_id))
                    })
                else:
                    result.append({
                        'user_id': similar_user_id,
                        'similarity': round(similarity, 3),
                        'name': f'User {similar_user_id}',
                        'age': None,
                        'ratings_count': 0
                    })
            except:
                result.append({
                    'user_id': similar_user_id,
                    'similarity': round(similarity, 3),
                    'name': f'User {similar_user_id}',
                    'age': None,
                    'ratings_count': 0
                })
        
        return result
    
    def get_similar_items(self, product_id: int, n_similar: int = 10) -> List[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã.
        
        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            n_similar: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        """
        if not self.is_model_trained or self.approach != 'item_based':
            raise ValueError("–ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—É—á–µ–Ω–∞ —Å approach='item_based'")
        
        similar_items = self.recommender.find_similar_items(product_id, n_similar)
        
        result = []
        for similar_product_id, similarity in similar_items:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
                product_info = self.data_manager.get_product_from_cache(similar_product_id)
                if product_info:
                    result.append({
                        'product_id': similar_product_id,
                        'similarity': round(similarity, 3),
                        'name': product_info.name,
                        'category': product_info.category,
                        'price': product_info.price,
                        'brand': product_info.brand
                    })
                else:
                    result.append({
                        'product_id': similar_product_id,
                        'similarity': round(similarity, 3),
                        'name': f'Product {similar_product_id}',
                        'category': 'Unknown',
                        'price': 0.0,
                        'brand': 'Unknown'
                    })
            except:
                result.append({
                    'product_id': similar_product_id,
                    'similarity': round(similarity, 3),
                    'name': f'Product {similar_product_id}',
                    'category': 'Unknown',
                    'price': 0.0,
                    'brand': 'Unknown'
                })
        
        return result
    
    def get_popular_items(self, n_items: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
        
        Args:
            n_items: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        """
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self._popular_items_cache is not None and 
            self._cache_timestamp is not None and 
            (datetime.now() - self._cache_timestamp).seconds < 3600):  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
            return self._popular_items_cache[:n_items]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        popular_items = self.data_manager_legacy.get_popular_products(n_items)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._popular_items_cache = popular_items
        self._cache_timestamp = datetime.now()
        
        return popular_items
    
    def get_user_profile(self, user_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        return self.data_manager_legacy.get_user_profile(user_id)
    
    def add_rating(self, user_id: int, product_id: int, rating: float, 
                   review: Optional[str] = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            rating: –†–µ–π—Ç–∏–Ω–≥ (1-5)
            review: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        if not (1 <= rating <= 5):
            raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        new_rating = Rating(
            user_id=user_id,
            product_id=product_id,
            rating=rating,
            timestamp=datetime.now(),
            review=review
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏ –∫—ç—à
        rating_id = self.data_manager.add_rating(new_rating)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º legacy DataManager
        new_rating_df = pd.DataFrame([new_rating.to_dict()])
        self.data_manager_legacy.ratings_df = pd.concat([
            self.data_manager_legacy.ratings_df, 
            new_rating_df
        ], ignore_index=True)
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å
        self.is_model_trained = False
        self._invalidate_cache()
        
        print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–æ–≤–∞—Ä {product_id}, —Ä–µ–π—Ç–∏–Ω–≥ {rating}")
        return rating_id
    
    def add_product(self, product: Product):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à.
        
        Args:
            product: –û–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
        """
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏ –∫—ç—à
        product_id = self.data_manager.add_product(product)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º legacy DataManager
        new_product_df = pd.DataFrame([product.to_dict()])
        self.data_manager_legacy.products_df = pd.concat([
            self.data_manager_legacy.products_df, 
            new_product_df
        ], ignore_index=True)
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å
        self.is_model_trained = False
        self._invalidate_cache()
        
        print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {product.name} (ID: {product.product_id})")
        return product_id
    
    def add_user(self, user: User):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à.
        
        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏ –∫—ç—à
        user_id = self.data_manager.add_user(user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º legacy DataManager
        new_user_df = pd.DataFrame([user.to_dict()])
        self.data_manager_legacy.users_df = pd.concat([
            self.data_manager_legacy.users_df, 
            new_user_df
        ], ignore_index=True)
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å
        self.is_model_trained = False
        self._invalidate_cache()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {user.name} (ID: {user.user_id})")
        return user_id
    
    def retrain_model(self):
        """
        –ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_data_loaded:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–∑ –ë–î
            self.data_manager.refresh_cache()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            users, products, ratings = self.data_manager.load_initial_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º legacy DataManager
            self.data_manager_legacy.load_users(users)
            self.data_manager_legacy.load_products(products)
            self.data_manager_legacy.load_ratings(ratings)
            
            # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            ratings_df = self.data_manager_legacy.ratings_df.copy()
            self.recommender.fit(ratings_df)
            
            self.is_model_trained = True
            self._invalidate_cache()
            
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = self.recommender.get_model_info()
            print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:")
            for key, value in model_info.items():
                print(f"  - {key}: {value}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.is_model_trained = False
            return False
    
    def get_system_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not self.is_data_loaded:
            return {"status": "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        db_stats = self.data_manager.get_stats()
        
        stats = {
            "data_loaded": self.is_data_loaded,
            "model_trained": self.is_model_trained,
            "approach": self.approach,
            "n_neighbors": self.n_neighbors,
            "metric": self.metric,
            **db_stats
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.is_data_loaded:
            user_stats = self.data_manager_legacy.get_user_statistics()
            stats.update(user_stats)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        if self.is_model_trained:
            model_info = self.recommender.get_model_info()
            stats.update(model_info)
        
        return stats
    
    def _invalidate_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à."""
        self._popular_items_cache = None
        self._cache_timestamp = None
    
    def __repr__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."""
        status = "trained" if self.is_model_trained else "not trained"
        return (f"RecommendationSystemDB(approach='{self.approach}', "
                f"n_neighbors={self.n_neighbors}, metric='{self.metric}', "
                f"status='{status}')")


def create_db_system(database_url: Optional[str] = None,
                     approach: str = 'user_based', 
                     n_neighbors: int = 10) -> RecommendationSystemDB:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        database_url: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite)
        approach: –ü–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º ('user_based' –∏–ª–∏ 'item_based')
        n_neighbors: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
        
    Returns:
        –û–±—É—á–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ë–î
    """
    print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = RecommendationSystemDB(
        database_url=database_url,
        approach=approach,
        n_neighbors=n_neighbors
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    system.load_data_from_db()
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    system.train_model()
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    return system


if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = create_db_system()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = system.get_system_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    for key, value in stats.items():
        print(f"  - {key}: {value}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1:")
    recommendations = system.get_recommendations(user_id=1, n_recommendations=5)
    for i, rec in enumerate(recommendations, 1):
        print(f"  {i}. {rec['name']} ({rec['category']}) - —Ä–µ–π—Ç–∏–Ω–≥: {rec['predicted_rating']}")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
