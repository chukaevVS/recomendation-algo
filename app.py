#!/usr/bin/env python3
"""
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–∏.
"""

import os
import sys
import argparse
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.recommendation_system import RecommendationSystemDB, create_db_system
from src.api.flask_api import RecommendationAPIDB
from config import get_config, SystemConfig


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    parser = argparse.ArgumentParser(
        description='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python app.py

  # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É
  python app.py --port 8080

  # –ó–∞–ø—É—Å–∫ —Å PostgreSQL
  python app.py --database postgresql://user:pass@localhost/recommendations

  # –ó–∞–ø—É—Å–∫ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
  python app.py --no-auto-load

  # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
  python app.py --debug

  # –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ
  ENVIRONMENT=production python app.py

  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  python app.py --show-config
        """
    )
    
    parser.add_argument(
        '--mode',
        choices=['api', 'demo', 'config'],
        default='api',
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: api (—Å–µ—Ä–≤–µ—Ä), demo (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è) –∏–ª–∏ config (–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--environment',
        choices=['development', 'staging', 'production'],
        default=None,
        help='–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (development, staging, production)'
    )
    
    parser.add_argument(
        '--database',
        type=str,
        default=None,
        help='URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--host',
        type=str,
        default=None,
        help='–•–æ—Å—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=None,
        help='–ü–æ—Ä—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--no-auto-load',
        action='store_true',
        help='–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
    )
    
    parser.add_argument(
        '--approach',
        choices=['user_based', 'item_based'],
        default=None,
        help='–ü–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--neighbors',
        type=int,
        default=None,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è k-NN (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--show-config',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –≤—ã–π—Ç–∏'
    )
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_config(args.environment)
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.database:
        config.database.url = args.database
    if args.host:
        config.api.host = args.host
    if args.port:
        config.api.port = args.port
    if args.debug:
        config.api.debug = True
    if args.approach:
        config.recommendation.approach = args.approach
    if args.neighbors:
        config.recommendation.n_neighbors = args.neighbors
    if args.no_auto_load:
        config.recommendation.auto_load = False
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.validate()
    
    print("üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("=" * 50)
    print(f"–†–µ–∂–∏–º: {args.mode}")
    print(f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {config.environment}")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.database.url}")
    print(f"API: {config.api.host}:{config.api.port}")
    print(f"–ü–æ–¥—Ö–æ–¥: {config.recommendation.approach}")
    print(f"–°–æ—Å–µ–¥–µ–π: {config.recommendation.n_neighbors}")
    print(f"–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞: {config.recommendation.auto_load}")
    print("=" * 50)
    
    if args.show_config or args.mode == 'config':
        show_config(config)
        return
    
    if args.mode == 'api':
        run_api_server(config)
    elif args.mode == 'demo':
        run_demo(config)


def show_config(config: SystemConfig):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    print("üîß –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
    print("=" * 50)
    
    import json
    config_dict = config.to_dict()
    print(json.dumps(config_dict, indent=2, ensure_ascii=False))


def run_api_server(config: SystemConfig):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä."""
    try:
        print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        system = RecommendationSystemDB(
            database_url=config.database.url,
            approach=config.recommendation.approach,
            n_neighbors=config.recommendation.n_neighbors,
            metric=config.recommendation.metric,
            min_ratings=config.recommendation.min_ratings,
            auto_load=config.recommendation.auto_load
        )
        
        print("üåê –°–æ–∑–¥–∞–Ω–∏–µ API —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º API —Å —Å–∏—Å—Ç–µ–º–æ–π
        api = RecommendationAPIDB(recommendation_system=system)
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats = system.get_system_stats()
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('n_users', 0)}")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {stats.get('n_items', 0)}")
        print(f"  - –†–µ–π—Ç–∏–Ω–≥–æ–≤: {stats.get('n_ratings', 0)}")
        print(f"  - –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {stats.get('model_trained', False)}")
        
        print(f"\nüåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {config.api.host}:{config.api.port}")
        print(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{config.api.host}:{config.api.port}/")
        print(f"‚ù§Ô∏è  Health check: http://{config.api.host}:{config.api.port}/health")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://{config.api.host}:{config.api.port}/stats")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        api.run(host=config.api.host, port=config.api.port, debug=config.api.debug)
        
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        if config.api.debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)


def run_demo(config: SystemConfig):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã."""
    try:
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system = RecommendationSystemDB(
            database_url=config.database.url,
            approach=config.recommendation.approach,
            n_neighbors=config.recommendation.n_neighbors,
            metric=config.recommendation.metric,
            min_ratings=config.recommendation.min_ratings,
            auto_load=config.recommendation.auto_load
        )
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = system.get_system_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('n_users', 0)}")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {stats.get('n_items', 0)}")
        print(f"  - –†–µ–π—Ç–∏–Ω–≥–æ–≤: {stats.get('n_ratings', 0)}")
        print(f"  - –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {stats.get('model_trained', False)}")
        
        if stats.get('model_trained', False):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            test_users = [1, 5, 10, 25, 50]
            
            for user_id in test_users:
                try:
                    print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
                    recommendations = system.get_recommendations(
                        user_id=user_id, 
                        n_recommendations=3
                    )
                    
                    for i, rec in enumerate(recommendations, 1):
                        print(f"  {i}. {rec['name']} ({rec['category']})")
                        print(f"     –†–µ–π—Ç–∏–Ω–≥: {rec['predicted_rating']}, –¶–µ–Ω–∞: {rec['price']:.2f} —Ä—É–±.")
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            print(f"\nüî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
            popular = system.get_popular_items(5)
            for i, item in enumerate(popular, 1):
                print(f"  {i}. {item['name']} ({item['category']}) - {item['rating_count']} –æ—Ü–µ–Ω–æ–∫")
        
        print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        if config.api.debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
